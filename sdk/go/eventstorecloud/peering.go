// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventstorecloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/EventStore/pulumi-eventstorecloud/sdk/go/eventstorecloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages peering connections between Event Store Cloud VPCs and customer own VPCs
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/EventStore/pulumi-eventstorecloud/sdk/go/eventstorecloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := eventstorecloud.NewProject(ctx, "exampleProject", nil)
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := eventstorecloud.NewNetwork(ctx, "exampleNetwork", &eventstorecloud.NetworkArgs{
//				ProjectId:        exampleProject.ID(),
//				ResourceProvider: pulumi.String("aws"),
//				Region:           pulumi.String("us-west-2"),
//				CidrBlock:        pulumi.String("172.21.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventstorecloud.NewPeering(ctx, "examplePeering", &eventstorecloud.PeeringArgs{
//				ProjectId:            exampleNetwork.ProjectId,
//				NetworkId:            exampleNetwork.ID(),
//				PeerResourceProvider: exampleNetwork.ResourceProvider,
//				PeerNetworkRegion:    exampleNetwork.Region,
//				PeerAccountId:        pulumi.String("<Customer AWS Account ID>"),
//				PeerNetworkId:        pulumi.String("<Customer VPC ID>"),
//				Routes: pulumi.StringArray{
//					pulumi.String("<Address space of the customer VPC>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import eventstorecloud:index/peering:Peering example project_id:peering_id
//
// ```
//
//	~> Keep in mind that additional operations might be required to activate the peering link. Check our [provisioning guidelines](https://developers.eventstore.com/cloud/provision/) for each of the supported cloud providers to know more.
type Peering struct {
	pulumi.CustomResourceState

	// Human-friendly name for the network
	Name pulumi.StringOutput `pulumi:"name"`
	// Network ID
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Account identifier in which to the peer network exists
	PeerAccountId pulumi.StringOutput `pulumi:"peerAccountId"`
	// Network identifier of the peer network exists
	PeerNetworkId pulumi.StringOutput `pulumi:"peerNetworkId"`
	// Provider region in which to the peer network exists
	PeerNetworkRegion pulumi.StringOutput `pulumi:"peerNetworkRegion"`
	// Cloud Provider in which the target network exists
	PeerResourceProvider pulumi.StringOutput `pulumi:"peerResourceProvider"`
	// Project ID
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Metadata about the remote end of the peering connection
	ProviderMetadata pulumi.StringMapOutput `pulumi:"providerMetadata"`
	// Routes to create from the Event Store network to the peer network
	Routes pulumi.StringArrayOutput `pulumi:"routes"`
}

// NewPeering registers a new resource with the given unique name, arguments, and options.
func NewPeering(ctx *pulumi.Context,
	name string, args *PeeringArgs, opts ...pulumi.ResourceOption) (*Peering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.PeerAccountId == nil {
		return nil, errors.New("invalid value for required argument 'PeerAccountId'")
	}
	if args.PeerNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'PeerNetworkId'")
	}
	if args.PeerNetworkRegion == nil {
		return nil, errors.New("invalid value for required argument 'PeerNetworkRegion'")
	}
	if args.PeerResourceProvider == nil {
		return nil, errors.New("invalid value for required argument 'PeerResourceProvider'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Routes == nil {
		return nil, errors.New("invalid value for required argument 'Routes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Peering
	err := ctx.RegisterResource("eventstorecloud:index/peering:Peering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeering gets an existing Peering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringState, opts ...pulumi.ResourceOption) (*Peering, error) {
	var resource Peering
	err := ctx.ReadResource("eventstorecloud:index/peering:Peering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Peering resources.
type peeringState struct {
	// Human-friendly name for the network
	Name *string `pulumi:"name"`
	// Network ID
	NetworkId *string `pulumi:"networkId"`
	// Account identifier in which to the peer network exists
	PeerAccountId *string `pulumi:"peerAccountId"`
	// Network identifier of the peer network exists
	PeerNetworkId *string `pulumi:"peerNetworkId"`
	// Provider region in which to the peer network exists
	PeerNetworkRegion *string `pulumi:"peerNetworkRegion"`
	// Cloud Provider in which the target network exists
	PeerResourceProvider *string `pulumi:"peerResourceProvider"`
	// Project ID
	ProjectId *string `pulumi:"projectId"`
	// Metadata about the remote end of the peering connection
	ProviderMetadata map[string]string `pulumi:"providerMetadata"`
	// Routes to create from the Event Store network to the peer network
	Routes []string `pulumi:"routes"`
}

type PeeringState struct {
	// Human-friendly name for the network
	Name pulumi.StringPtrInput
	// Network ID
	NetworkId pulumi.StringPtrInput
	// Account identifier in which to the peer network exists
	PeerAccountId pulumi.StringPtrInput
	// Network identifier of the peer network exists
	PeerNetworkId pulumi.StringPtrInput
	// Provider region in which to the peer network exists
	PeerNetworkRegion pulumi.StringPtrInput
	// Cloud Provider in which the target network exists
	PeerResourceProvider pulumi.StringPtrInput
	// Project ID
	ProjectId pulumi.StringPtrInput
	// Metadata about the remote end of the peering connection
	ProviderMetadata pulumi.StringMapInput
	// Routes to create from the Event Store network to the peer network
	Routes pulumi.StringArrayInput
}

func (PeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringState)(nil)).Elem()
}

type peeringArgs struct {
	// Human-friendly name for the network
	Name *string `pulumi:"name"`
	// Network ID
	NetworkId string `pulumi:"networkId"`
	// Account identifier in which to the peer network exists
	PeerAccountId string `pulumi:"peerAccountId"`
	// Network identifier of the peer network exists
	PeerNetworkId string `pulumi:"peerNetworkId"`
	// Provider region in which to the peer network exists
	PeerNetworkRegion string `pulumi:"peerNetworkRegion"`
	// Cloud Provider in which the target network exists
	PeerResourceProvider string `pulumi:"peerResourceProvider"`
	// Project ID
	ProjectId string `pulumi:"projectId"`
	// Routes to create from the Event Store network to the peer network
	Routes []string `pulumi:"routes"`
}

// The set of arguments for constructing a Peering resource.
type PeeringArgs struct {
	// Human-friendly name for the network
	Name pulumi.StringPtrInput
	// Network ID
	NetworkId pulumi.StringInput
	// Account identifier in which to the peer network exists
	PeerAccountId pulumi.StringInput
	// Network identifier of the peer network exists
	PeerNetworkId pulumi.StringInput
	// Provider region in which to the peer network exists
	PeerNetworkRegion pulumi.StringInput
	// Cloud Provider in which the target network exists
	PeerResourceProvider pulumi.StringInput
	// Project ID
	ProjectId pulumi.StringInput
	// Routes to create from the Event Store network to the peer network
	Routes pulumi.StringArrayInput
}

func (PeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringArgs)(nil)).Elem()
}

type PeeringInput interface {
	pulumi.Input

	ToPeeringOutput() PeeringOutput
	ToPeeringOutputWithContext(ctx context.Context) PeeringOutput
}

func (*Peering) ElementType() reflect.Type {
	return reflect.TypeOf((**Peering)(nil)).Elem()
}

func (i *Peering) ToPeeringOutput() PeeringOutput {
	return i.ToPeeringOutputWithContext(context.Background())
}

func (i *Peering) ToPeeringOutputWithContext(ctx context.Context) PeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringOutput)
}

// PeeringArrayInput is an input type that accepts PeeringArray and PeeringArrayOutput values.
// You can construct a concrete instance of `PeeringArrayInput` via:
//
//	PeeringArray{ PeeringArgs{...} }
type PeeringArrayInput interface {
	pulumi.Input

	ToPeeringArrayOutput() PeeringArrayOutput
	ToPeeringArrayOutputWithContext(context.Context) PeeringArrayOutput
}

type PeeringArray []PeeringInput

func (PeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Peering)(nil)).Elem()
}

func (i PeeringArray) ToPeeringArrayOutput() PeeringArrayOutput {
	return i.ToPeeringArrayOutputWithContext(context.Background())
}

func (i PeeringArray) ToPeeringArrayOutputWithContext(ctx context.Context) PeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringArrayOutput)
}

// PeeringMapInput is an input type that accepts PeeringMap and PeeringMapOutput values.
// You can construct a concrete instance of `PeeringMapInput` via:
//
//	PeeringMap{ "key": PeeringArgs{...} }
type PeeringMapInput interface {
	pulumi.Input

	ToPeeringMapOutput() PeeringMapOutput
	ToPeeringMapOutputWithContext(context.Context) PeeringMapOutput
}

type PeeringMap map[string]PeeringInput

func (PeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Peering)(nil)).Elem()
}

func (i PeeringMap) ToPeeringMapOutput() PeeringMapOutput {
	return i.ToPeeringMapOutputWithContext(context.Background())
}

func (i PeeringMap) ToPeeringMapOutputWithContext(ctx context.Context) PeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringMapOutput)
}

type PeeringOutput struct{ *pulumi.OutputState }

func (PeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Peering)(nil)).Elem()
}

func (o PeeringOutput) ToPeeringOutput() PeeringOutput {
	return o
}

func (o PeeringOutput) ToPeeringOutputWithContext(ctx context.Context) PeeringOutput {
	return o
}

// Human-friendly name for the network
func (o PeeringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Peering) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network ID
func (o PeeringOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Peering) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Account identifier in which to the peer network exists
func (o PeeringOutput) PeerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Peering) pulumi.StringOutput { return v.PeerAccountId }).(pulumi.StringOutput)
}

// Network identifier of the peer network exists
func (o PeeringOutput) PeerNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Peering) pulumi.StringOutput { return v.PeerNetworkId }).(pulumi.StringOutput)
}

// Provider region in which to the peer network exists
func (o PeeringOutput) PeerNetworkRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Peering) pulumi.StringOutput { return v.PeerNetworkRegion }).(pulumi.StringOutput)
}

// Cloud Provider in which the target network exists
func (o PeeringOutput) PeerResourceProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Peering) pulumi.StringOutput { return v.PeerResourceProvider }).(pulumi.StringOutput)
}

// Project ID
func (o PeeringOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Peering) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Metadata about the remote end of the peering connection
func (o PeeringOutput) ProviderMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Peering) pulumi.StringMapOutput { return v.ProviderMetadata }).(pulumi.StringMapOutput)
}

// Routes to create from the Event Store network to the peer network
func (o PeeringOutput) Routes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Peering) pulumi.StringArrayOutput { return v.Routes }).(pulumi.StringArrayOutput)
}

type PeeringArrayOutput struct{ *pulumi.OutputState }

func (PeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Peering)(nil)).Elem()
}

func (o PeeringArrayOutput) ToPeeringArrayOutput() PeeringArrayOutput {
	return o
}

func (o PeeringArrayOutput) ToPeeringArrayOutputWithContext(ctx context.Context) PeeringArrayOutput {
	return o
}

func (o PeeringArrayOutput) Index(i pulumi.IntInput) PeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Peering {
		return vs[0].([]*Peering)[vs[1].(int)]
	}).(PeeringOutput)
}

type PeeringMapOutput struct{ *pulumi.OutputState }

func (PeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Peering)(nil)).Elem()
}

func (o PeeringMapOutput) ToPeeringMapOutput() PeeringMapOutput {
	return o
}

func (o PeeringMapOutput) ToPeeringMapOutputWithContext(ctx context.Context) PeeringMapOutput {
	return o
}

func (o PeeringMapOutput) MapIndex(k pulumi.StringInput) PeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Peering {
		return vs[0].(map[string]*Peering)[vs[1].(string)]
	}).(PeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringInput)(nil)).Elem(), &Peering{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringArrayInput)(nil)).Elem(), PeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringMapInput)(nil)).Elem(), PeeringMap{})
	pulumi.RegisterOutputType(PeeringOutput{})
	pulumi.RegisterOutputType(PeeringArrayOutput{})
	pulumi.RegisterOutputType(PeeringMapOutput{})
}
