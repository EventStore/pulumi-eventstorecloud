// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages EventStoreDB instances and clusters in Event Store Cloud
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as eventstorecloud from "@pulumi/eventstorecloud";
 *
 * const exampleProject = eventstorecloud.getProject({
 *     name: "Example Project",
 * });
 * const exampleNetwork = new eventstorecloud.Network("exampleNetwork", {
 *     projectId: eventstorecloud_project.example.id,
 *     resourceProvider: "aws",
 *     region: "us-west-2",
 *     cidrBlock: "172.21.0.0/16",
 * });
 * const exampleManagedCluster = new eventstorecloud.ManagedCluster("exampleManagedCluster", {
 *     projectId: exampleNetwork.projectId,
 *     networkId: exampleNetwork.id,
 *     topology: "three-node-multi-zone",
 *     instanceType: "F1",
 *     diskSize: 24,
 *     diskType: "gp2",
 *     serverVersion: "20.6",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import eventstorecloud:index/managedCluster:ManagedCluster example project_id:cluster_id
 * ```
 */
export class ManagedCluster extends pulumi.CustomResource {
    /**
     * Get an existing ManagedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedClusterState, opts?: pulumi.CustomResourceOptions): ManagedCluster {
        return new ManagedCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'eventstorecloud:index/managedCluster:ManagedCluster';

    /**
     * Returns true if the given object is an instance of ManagedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedCluster.__pulumiType;
    }

    /**
     * Size of the data disks, in gigabytes
     */
    public readonly diskSize!: pulumi.Output<number>;
    /**
     * Storage class of the data disks (find the list of valid values below)
     */
    public readonly diskType!: pulumi.Output<string>;
    /**
     * DNS address of the cluster
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * Instance type of the managed cluster (find the list of valid values below)
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * Name of the managed cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the network in which the managed cluster exists
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * ID of the project in which the managed cluster exists
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Determines whether to run no projections, system projections only, or system and user projections (find the list of valid values below) Defaults to `off`.
     */
    public readonly projectionLevel!: pulumi.Output<string | undefined>;
    /**
     * Region in which the cluster was created. Determined by the region of the Network
     */
    public /*out*/ readonly region!: pulumi.Output<string>;
    /**
     * Provider in which the cluster was created. Determined by the provider of the Network.
     */
    public /*out*/ readonly resourceProvider!: pulumi.Output<string>;
    /**
     * Server version to provision (find the list of valid values below)
     */
    public readonly serverVersion!: pulumi.Output<string>;
    /**
     * Topology of the managed cluster (`single-node` or `three-node-multi-zone`)
     */
    public readonly topology!: pulumi.Output<string>;

    /**
     * Create a ManagedCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedClusterArgs | ManagedClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedClusterState | undefined;
            inputs["diskSize"] = state ? state.diskSize : undefined;
            inputs["diskType"] = state ? state.diskType : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["instanceType"] = state ? state.instanceType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["projectionLevel"] = state ? state.projectionLevel : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["resourceProvider"] = state ? state.resourceProvider : undefined;
            inputs["serverVersion"] = state ? state.serverVersion : undefined;
            inputs["topology"] = state ? state.topology : undefined;
        } else {
            const args = argsOrState as ManagedClusterArgs | undefined;
            if ((!args || args.diskSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskSize'");
            }
            if ((!args || args.diskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskType'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.serverVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverVersion'");
            }
            if ((!args || args.topology === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topology'");
            }
            inputs["diskSize"] = args ? args.diskSize : undefined;
            inputs["diskType"] = args ? args.diskType : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["projectionLevel"] = args ? args.projectionLevel : undefined;
            inputs["serverVersion"] = args ? args.serverVersion : undefined;
            inputs["topology"] = args ? args.topology : undefined;
            inputs["dnsName"] = undefined /*out*/;
            inputs["region"] = undefined /*out*/;
            inputs["resourceProvider"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ManagedCluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedCluster resources.
 */
export interface ManagedClusterState {
    /**
     * Size of the data disks, in gigabytes
     */
    diskSize?: pulumi.Input<number>;
    /**
     * Storage class of the data disks (find the list of valid values below)
     */
    diskType?: pulumi.Input<string>;
    /**
     * DNS address of the cluster
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Instance type of the managed cluster (find the list of valid values below)
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Name of the managed cluster
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the network in which the managed cluster exists
     */
    networkId?: pulumi.Input<string>;
    /**
     * ID of the project in which the managed cluster exists
     */
    projectId?: pulumi.Input<string>;
    /**
     * Determines whether to run no projections, system projections only, or system and user projections (find the list of valid values below) Defaults to `off`.
     */
    projectionLevel?: pulumi.Input<string>;
    /**
     * Region in which the cluster was created. Determined by the region of the Network
     */
    region?: pulumi.Input<string>;
    /**
     * Provider in which the cluster was created. Determined by the provider of the Network.
     */
    resourceProvider?: pulumi.Input<string>;
    /**
     * Server version to provision (find the list of valid values below)
     */
    serverVersion?: pulumi.Input<string>;
    /**
     * Topology of the managed cluster (`single-node` or `three-node-multi-zone`)
     */
    topology?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedCluster resource.
 */
export interface ManagedClusterArgs {
    /**
     * Size of the data disks, in gigabytes
     */
    diskSize: pulumi.Input<number>;
    /**
     * Storage class of the data disks (find the list of valid values below)
     */
    diskType: pulumi.Input<string>;
    /**
     * Instance type of the managed cluster (find the list of valid values below)
     */
    instanceType: pulumi.Input<string>;
    /**
     * Name of the managed cluster
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the network in which the managed cluster exists
     */
    networkId: pulumi.Input<string>;
    /**
     * ID of the project in which the managed cluster exists
     */
    projectId: pulumi.Input<string>;
    /**
     * Determines whether to run no projections, system projections only, or system and user projections (find the list of valid values below) Defaults to `off`.
     */
    projectionLevel?: pulumi.Input<string>;
    /**
     * Server version to provision (find the list of valid values below)
     */
    serverVersion: pulumi.Input<string>;
    /**
     * Topology of the managed cluster (`single-node` or `three-node-multi-zone`)
     */
    topology: pulumi.Input<string>;
}
