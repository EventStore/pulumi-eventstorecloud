// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AWSCloudWatchLogsIntegration extends pulumi.CustomResource {
    /**
     * Get an existing AWSCloudWatchLogsIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AWSCloudWatchLogsIntegrationState, opts?: pulumi.CustomResourceOptions): AWSCloudWatchLogsIntegration {
        return new AWSCloudWatchLogsIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'eventstorecloud:index/aWSCloudWatchLogsIntegration:AWSCloudWatchLogsIntegration';

    /**
     * Returns true if the given object is an instance of AWSCloudWatchLogsIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AWSCloudWatchLogsIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AWSCloudWatchLogsIntegration.__pulumiType;
    }

    /**
     * The access key ID of IAM credentials which have permissions to create and write to the log group
     */
    public readonly accessKeyId!: pulumi.Output<string | undefined>;
    /**
     * Clusters to be used with this integration
     */
    public readonly clusterIds!: pulumi.Output<string[]>;
    /**
     * Human readable description of the integration
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the CloudWatch group
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * ID of the project to which the integration applies
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * AWS region for group
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The secret access key of IAM credentials which will be used to write to the log groups
     */
    public readonly secretAccessKey!: pulumi.Output<string | undefined>;

    /**
     * Create a AWSCloudWatchLogsIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AWSCloudWatchLogsIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AWSCloudWatchLogsIntegrationArgs | AWSCloudWatchLogsIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AWSCloudWatchLogsIntegrationState | undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["clusterIds"] = state ? state.clusterIds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretAccessKey"] = state ? state.secretAccessKey : undefined;
        } else {
            const args = argsOrState as AWSCloudWatchLogsIntegrationArgs | undefined;
            if ((!args || args.clusterIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIds'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["accessKeyId"] = args ? args.accessKeyId : undefined;
            resourceInputs["clusterIds"] = args ? args.clusterIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretAccessKey"] = args ? args.secretAccessKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AWSCloudWatchLogsIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AWSCloudWatchLogsIntegration resources.
 */
export interface AWSCloudWatchLogsIntegrationState {
    /**
     * The access key ID of IAM credentials which have permissions to create and write to the log group
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * Clusters to be used with this integration
     */
    clusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human readable description of the integration
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the CloudWatch group
     */
    groupName?: pulumi.Input<string>;
    /**
     * ID of the project to which the integration applies
     */
    projectId?: pulumi.Input<string>;
    /**
     * AWS region for group
     */
    region?: pulumi.Input<string>;
    /**
     * The secret access key of IAM credentials which will be used to write to the log groups
     */
    secretAccessKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AWSCloudWatchLogsIntegration resource.
 */
export interface AWSCloudWatchLogsIntegrationArgs {
    /**
     * The access key ID of IAM credentials which have permissions to create and write to the log group
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * Clusters to be used with this integration
     */
    clusterIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human readable description of the integration
     */
    description: pulumi.Input<string>;
    /**
     * Name of the CloudWatch group
     */
    groupName: pulumi.Input<string>;
    /**
     * ID of the project to which the integration applies
     */
    projectId: pulumi.Input<string>;
    /**
     * AWS region for group
     */
    region: pulumi.Input<string>;
    /**
     * The secret access key of IAM credentials which will be used to write to the log groups
     */
    secretAccessKey?: pulumi.Input<string>;
}
