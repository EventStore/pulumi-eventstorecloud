// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'eventstorecloud:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * Address space of the network in CIDR block notation
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * Human-friendly name for the network
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project ID
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Provider region in which to provision the network
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Cloud Provider in which to provision the network.
     */
    public readonly resourceProvider!: pulumi.Output<string>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            inputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["resourceProvider"] = state ? state.resourceProvider : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if ((!args || args.cidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrBlock'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.resourceProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceProvider'");
            }
            inputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["resourceProvider"] = args ? args.resourceProvider : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Network.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * Address space of the network in CIDR block notation
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * Human-friendly name for the network
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID
     */
    projectId?: pulumi.Input<string>;
    /**
     * Provider region in which to provision the network
     */
    region?: pulumi.Input<string>;
    /**
     * Cloud Provider in which to provision the network.
     */
    resourceProvider?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * Address space of the network in CIDR block notation
     */
    cidrBlock: pulumi.Input<string>;
    /**
     * Human-friendly name for the network
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID
     */
    projectId: pulumi.Input<string>;
    /**
     * Provider region in which to provision the network
     */
    region: pulumi.Input<string>;
    /**
     * Cloud Provider in which to provision the network.
     */
    resourceProvider: pulumi.Input<string>;
}
