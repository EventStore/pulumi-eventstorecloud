// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages peering connections between Event Store Cloud VPCs and customer own VPCs
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as eventstorecloud from "@pulumi/eventstorecloud";
 *
 * // Example for AWS
 * const exampleProject = new eventstorecloud.Project("exampleProject", {});
 * const exampleNetwork = new eventstorecloud.Network("exampleNetwork", {
 *     projectId: exampleProject.id,
 *     resourceProvider: "aws",
 *     region: "us-west-2",
 *     cidrBlock: "172.21.0.0/16",
 * });
 * const examplePeering = new eventstorecloud.Peering("examplePeering", {
 *     projectId: exampleNetwork.projectId,
 *     networkId: exampleNetwork.id,
 *     peerResourceProvider: exampleNetwork.resourceProvider,
 *     peerNetworkRegion: exampleNetwork.region,
 *     peerAccountId: "<Customer AWS Account ID>",
 *     peerNetworkId: "<Customer VPC ID>",
 *     routes: ["<Address space of the customer VPC>"],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import eventstorecloud:index/peering:Peering example project_id:peering_id
 * ```
 *
 *  ~> Keep in mind that additional operations might be required to activate the peering link. Check our [provisioning guidelines](https://developers.eventstore.com/cloud/provision/) for each of the supported cloud providers to know more.
 */
export class Peering extends pulumi.CustomResource {
    /**
     * Get an existing Peering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PeeringState, opts?: pulumi.CustomResourceOptions): Peering {
        return new Peering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'eventstorecloud:index/peering:Peering';

    /**
     * Returns true if the given object is an instance of Peering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Peering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Peering.__pulumiType;
    }

    /**
     * Human-friendly name for the network
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network ID
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Account identifier in which to the peer network exists
     */
    public readonly peerAccountId!: pulumi.Output<string>;
    /**
     * Network identifier of the peer network exists
     */
    public readonly peerNetworkId!: pulumi.Output<string>;
    /**
     * Provider region in which to the peer network exists
     */
    public readonly peerNetworkRegion!: pulumi.Output<string>;
    /**
     * Cloud Provider in which the target network exists
     */
    public readonly peerResourceProvider!: pulumi.Output<string>;
    /**
     * Project ID
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Metadata about the remote end of the peering connection
     */
    public /*out*/ readonly providerMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Routes to create from the Event Store network to the peer network
     */
    public readonly routes!: pulumi.Output<string[]>;

    /**
     * Create a Peering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PeeringArgs | PeeringState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PeeringState | undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["peerAccountId"] = state ? state.peerAccountId : undefined;
            inputs["peerNetworkId"] = state ? state.peerNetworkId : undefined;
            inputs["peerNetworkRegion"] = state ? state.peerNetworkRegion : undefined;
            inputs["peerResourceProvider"] = state ? state.peerResourceProvider : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["providerMetadata"] = state ? state.providerMetadata : undefined;
            inputs["routes"] = state ? state.routes : undefined;
        } else {
            const args = argsOrState as PeeringArgs | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.peerAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAccountId'");
            }
            if ((!args || args.peerNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetworkId'");
            }
            if ((!args || args.peerNetworkRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerNetworkRegion'");
            }
            if ((!args || args.peerResourceProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerResourceProvider'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.routes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routes'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["peerAccountId"] = args ? args.peerAccountId : undefined;
            inputs["peerNetworkId"] = args ? args.peerNetworkId : undefined;
            inputs["peerNetworkRegion"] = args ? args.peerNetworkRegion : undefined;
            inputs["peerResourceProvider"] = args ? args.peerResourceProvider : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["routes"] = args ? args.routes : undefined;
            inputs["providerMetadata"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Peering.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Peering resources.
 */
export interface PeeringState {
    /**
     * Human-friendly name for the network
     */
    name?: pulumi.Input<string>;
    /**
     * Network ID
     */
    networkId?: pulumi.Input<string>;
    /**
     * Account identifier in which to the peer network exists
     */
    peerAccountId?: pulumi.Input<string>;
    /**
     * Network identifier of the peer network exists
     */
    peerNetworkId?: pulumi.Input<string>;
    /**
     * Provider region in which to the peer network exists
     */
    peerNetworkRegion?: pulumi.Input<string>;
    /**
     * Cloud Provider in which the target network exists
     */
    peerResourceProvider?: pulumi.Input<string>;
    /**
     * Project ID
     */
    projectId?: pulumi.Input<string>;
    /**
     * Metadata about the remote end of the peering connection
     */
    providerMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Routes to create from the Event Store network to the peer network
     */
    routes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Peering resource.
 */
export interface PeeringArgs {
    /**
     * Human-friendly name for the network
     */
    name?: pulumi.Input<string>;
    /**
     * Network ID
     */
    networkId: pulumi.Input<string>;
    /**
     * Account identifier in which to the peer network exists
     */
    peerAccountId: pulumi.Input<string>;
    /**
     * Network identifier of the peer network exists
     */
    peerNetworkId: pulumi.Input<string>;
    /**
     * Provider region in which to the peer network exists
     */
    peerNetworkRegion: pulumi.Input<string>;
    /**
     * Cloud Provider in which the target network exists
     */
    peerResourceProvider: pulumi.Input<string>;
    /**
     * Project ID
     */
    projectId: pulumi.Input<string>;
    /**
     * Routes to create from the Event Store network to the peer network
     */
    routes: pulumi.Input<pulumi.Input<string>[]>;
}
