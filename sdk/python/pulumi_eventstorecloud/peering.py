# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PeeringArgs', 'Peering']

@pulumi.input_type
class PeeringArgs:
    def __init__(__self__, *,
                 network_id: pulumi.Input[str],
                 peer_account_id: pulumi.Input[str],
                 peer_network_id: pulumi.Input[str],
                 peer_network_region: pulumi.Input[str],
                 peer_resource_provider: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 routes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Peering resource.
        :param pulumi.Input[str] network_id: Network ID
        :param pulumi.Input[str] peer_account_id: Account identifier in which to the peer network exists
        :param pulumi.Input[str] peer_network_id: Network identifier of the peer network exists
        :param pulumi.Input[str] peer_network_region: Provider region in which to the peer network exists
        :param pulumi.Input[str] peer_resource_provider: Cloud Provider in which the target network exists
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routes: Routes to create from the Event Store network to the peer network
        :param pulumi.Input[str] name: Human-friendly name for the network
        """
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "peer_account_id", peer_account_id)
        pulumi.set(__self__, "peer_network_id", peer_network_id)
        pulumi.set(__self__, "peer_network_region", peer_network_region)
        pulumi.set(__self__, "peer_resource_provider", peer_resource_provider)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "routes", routes)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        """
        Network ID
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="peerAccountId")
    def peer_account_id(self) -> pulumi.Input[str]:
        """
        Account identifier in which to the peer network exists
        """
        return pulumi.get(self, "peer_account_id")

    @peer_account_id.setter
    def peer_account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_account_id", value)

    @property
    @pulumi.getter(name="peerNetworkId")
    def peer_network_id(self) -> pulumi.Input[str]:
        """
        Network identifier of the peer network exists
        """
        return pulumi.get(self, "peer_network_id")

    @peer_network_id.setter
    def peer_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_network_id", value)

    @property
    @pulumi.getter(name="peerNetworkRegion")
    def peer_network_region(self) -> pulumi.Input[str]:
        """
        Provider region in which to the peer network exists
        """
        return pulumi.get(self, "peer_network_region")

    @peer_network_region.setter
    def peer_network_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_network_region", value)

    @property
    @pulumi.getter(name="peerResourceProvider")
    def peer_resource_provider(self) -> pulumi.Input[str]:
        """
        Cloud Provider in which the target network exists
        """
        return pulumi.get(self, "peer_resource_provider")

    @peer_resource_provider.setter
    def peer_resource_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "peer_resource_provider", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Routes to create from the Event Store network to the peer network
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PeeringState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 peer_account_id: Optional[pulumi.Input[str]] = None,
                 peer_network_id: Optional[pulumi.Input[str]] = None,
                 peer_network_region: Optional[pulumi.Input[str]] = None,
                 peer_resource_provider: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 provider_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Peering resources.
        :param pulumi.Input[str] name: Human-friendly name for the network
        :param pulumi.Input[str] network_id: Network ID
        :param pulumi.Input[str] peer_account_id: Account identifier in which to the peer network exists
        :param pulumi.Input[str] peer_network_id: Network identifier of the peer network exists
        :param pulumi.Input[str] peer_network_region: Provider region in which to the peer network exists
        :param pulumi.Input[str] peer_resource_provider: Cloud Provider in which the target network exists
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] provider_metadata: Metadata about the remote end of the peering connection
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routes: Routes to create from the Event Store network to the peer network
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if peer_account_id is not None:
            pulumi.set(__self__, "peer_account_id", peer_account_id)
        if peer_network_id is not None:
            pulumi.set(__self__, "peer_network_id", peer_network_id)
        if peer_network_region is not None:
            pulumi.set(__self__, "peer_network_region", peer_network_region)
        if peer_resource_provider is not None:
            pulumi.set(__self__, "peer_resource_provider", peer_resource_provider)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if provider_metadata is not None:
            pulumi.set(__self__, "provider_metadata", provider_metadata)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name for the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Network ID
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="peerAccountId")
    def peer_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account identifier in which to the peer network exists
        """
        return pulumi.get(self, "peer_account_id")

    @peer_account_id.setter
    def peer_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_account_id", value)

    @property
    @pulumi.getter(name="peerNetworkId")
    def peer_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Network identifier of the peer network exists
        """
        return pulumi.get(self, "peer_network_id")

    @peer_network_id.setter
    def peer_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_network_id", value)

    @property
    @pulumi.getter(name="peerNetworkRegion")
    def peer_network_region(self) -> Optional[pulumi.Input[str]]:
        """
        Provider region in which to the peer network exists
        """
        return pulumi.get(self, "peer_network_region")

    @peer_network_region.setter
    def peer_network_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_network_region", value)

    @property
    @pulumi.getter(name="peerResourceProvider")
    def peer_resource_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Provider in which the target network exists
        """
        return pulumi.get(self, "peer_resource_provider")

    @peer_resource_provider.setter
    def peer_resource_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_resource_provider", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="providerMetadata")
    def provider_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Metadata about the remote end of the peering connection
        """
        return pulumi.get(self, "provider_metadata")

    @provider_metadata.setter
    def provider_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "provider_metadata", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Routes to create from the Event Store network to the peer network
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "routes", value)


class Peering(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 peer_account_id: Optional[pulumi.Input[str]] = None,
                 peer_network_id: Optional[pulumi.Input[str]] = None,
                 peer_network_region: Optional[pulumi.Input[str]] = None,
                 peer_resource_provider: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages peering connections between Event Store Cloud VPCs and customer own VPCs

        ## Example Usage

        ```python
        import pulumi
        import pulumi_eventstorecloud as eventstorecloud

        # Example for AWS
        example_project = eventstorecloud.Project("exampleProject")
        example_network = eventstorecloud.Network("exampleNetwork",
            project_id=example_project.id,
            resource_provider="aws",
            region="us-west-2",
            cidr_block="172.21.0.0/16")
        example_peering = eventstorecloud.Peering("examplePeering",
            project_id=example_network.project_id,
            network_id=example_network.id,
            peer_resource_provider=example_network.resource_provider,
            peer_network_region=example_network.region,
            peer_account_id="<Customer AWS Account ID>",
            peer_network_id="<Customer VPC ID>",
            routes=["<Address space of the customer VPC>"])
        ```

        ## Import

        ```sh
         $ pulumi import eventstorecloud:index/peering:Peering example project_id:peering_id
        ```

         ~> Keep in mind that additional operations might be required to activate the peering link. Check our [provisioning guidelines](https://developers.eventstore.com/cloud/provision/) for each of the supported cloud providers to know more.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Human-friendly name for the network
        :param pulumi.Input[str] network_id: Network ID
        :param pulumi.Input[str] peer_account_id: Account identifier in which to the peer network exists
        :param pulumi.Input[str] peer_network_id: Network identifier of the peer network exists
        :param pulumi.Input[str] peer_network_region: Provider region in which to the peer network exists
        :param pulumi.Input[str] peer_resource_provider: Cloud Provider in which the target network exists
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routes: Routes to create from the Event Store network to the peer network
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PeeringArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages peering connections between Event Store Cloud VPCs and customer own VPCs

        ## Example Usage

        ```python
        import pulumi
        import pulumi_eventstorecloud as eventstorecloud

        # Example for AWS
        example_project = eventstorecloud.Project("exampleProject")
        example_network = eventstorecloud.Network("exampleNetwork",
            project_id=example_project.id,
            resource_provider="aws",
            region="us-west-2",
            cidr_block="172.21.0.0/16")
        example_peering = eventstorecloud.Peering("examplePeering",
            project_id=example_network.project_id,
            network_id=example_network.id,
            peer_resource_provider=example_network.resource_provider,
            peer_network_region=example_network.region,
            peer_account_id="<Customer AWS Account ID>",
            peer_network_id="<Customer VPC ID>",
            routes=["<Address space of the customer VPC>"])
        ```

        ## Import

        ```sh
         $ pulumi import eventstorecloud:index/peering:Peering example project_id:peering_id
        ```

         ~> Keep in mind that additional operations might be required to activate the peering link. Check our [provisioning guidelines](https://developers.eventstore.com/cloud/provision/) for each of the supported cloud providers to know more.

        :param str resource_name: The name of the resource.
        :param PeeringArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PeeringArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 peer_account_id: Optional[pulumi.Input[str]] = None,
                 peer_network_id: Optional[pulumi.Input[str]] = None,
                 peer_network_region: Optional[pulumi.Input[str]] = None,
                 peer_resource_provider: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PeeringArgs.__new__(PeeringArgs)

            __props__.__dict__["name"] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            if peer_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'peer_account_id'")
            __props__.__dict__["peer_account_id"] = peer_account_id
            if peer_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'peer_network_id'")
            __props__.__dict__["peer_network_id"] = peer_network_id
            if peer_network_region is None and not opts.urn:
                raise TypeError("Missing required property 'peer_network_region'")
            __props__.__dict__["peer_network_region"] = peer_network_region
            if peer_resource_provider is None and not opts.urn:
                raise TypeError("Missing required property 'peer_resource_provider'")
            __props__.__dict__["peer_resource_provider"] = peer_resource_provider
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if routes is None and not opts.urn:
                raise TypeError("Missing required property 'routes'")
            __props__.__dict__["routes"] = routes
            __props__.__dict__["provider_metadata"] = None
        super(Peering, __self__).__init__(
            'eventstorecloud:index/peering:Peering',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            peer_account_id: Optional[pulumi.Input[str]] = None,
            peer_network_id: Optional[pulumi.Input[str]] = None,
            peer_network_region: Optional[pulumi.Input[str]] = None,
            peer_resource_provider: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            provider_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Peering':
        """
        Get an existing Peering resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Human-friendly name for the network
        :param pulumi.Input[str] network_id: Network ID
        :param pulumi.Input[str] peer_account_id: Account identifier in which to the peer network exists
        :param pulumi.Input[str] peer_network_id: Network identifier of the peer network exists
        :param pulumi.Input[str] peer_network_region: Provider region in which to the peer network exists
        :param pulumi.Input[str] peer_resource_provider: Cloud Provider in which the target network exists
        :param pulumi.Input[str] project_id: Project ID
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] provider_metadata: Metadata about the remote end of the peering connection
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routes: Routes to create from the Event Store network to the peer network
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PeeringState.__new__(_PeeringState)

        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["peer_account_id"] = peer_account_id
        __props__.__dict__["peer_network_id"] = peer_network_id
        __props__.__dict__["peer_network_region"] = peer_network_region
        __props__.__dict__["peer_resource_provider"] = peer_resource_provider
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["provider_metadata"] = provider_metadata
        __props__.__dict__["routes"] = routes
        return Peering(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Human-friendly name for the network
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        """
        Network ID
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="peerAccountId")
    def peer_account_id(self) -> pulumi.Output[str]:
        """
        Account identifier in which to the peer network exists
        """
        return pulumi.get(self, "peer_account_id")

    @property
    @pulumi.getter(name="peerNetworkId")
    def peer_network_id(self) -> pulumi.Output[str]:
        """
        Network identifier of the peer network exists
        """
        return pulumi.get(self, "peer_network_id")

    @property
    @pulumi.getter(name="peerNetworkRegion")
    def peer_network_region(self) -> pulumi.Output[str]:
        """
        Provider region in which to the peer network exists
        """
        return pulumi.get(self, "peer_network_region")

    @property
    @pulumi.getter(name="peerResourceProvider")
    def peer_resource_provider(self) -> pulumi.Output[str]:
        """
        Cloud Provider in which the target network exists
        """
        return pulumi.get(self, "peer_resource_provider")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project ID
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="providerMetadata")
    def provider_metadata(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Metadata about the remote end of the peering connection
        """
        return pulumi.get(self, "provider_metadata")

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Sequence[str]]:
        """
        Routes to create from the Event Store network to the peer network
        """
        return pulumi.get(self, "routes")

