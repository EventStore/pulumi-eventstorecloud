// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.EventStoreCloud
{
    /// <summary>
    /// Manages integration resources, for example Slack or OpsGenie.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using EventStoreCloud = Pulumi.EventStoreCloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var opsgenieIssues = new EventStoreCloud.Integration("opsgenieIssues", new EventStoreCloud.IntegrationArgs
    ///         {
    ///             ProjectId = @var.Project_id,
    ///             Description = "create OpsGenie alerts from issues",
    ///             Data = 
    ///             {
    ///                 { "sink", "opsGenie" },
    ///                 { "api_key", "&lt;secret OpsGenie key here&gt;" },
    ///                 { "source", "issues" },
    ///             },
    ///         });
    ///         var slackNotifications = new EventStoreCloud.Integration("slackNotifications", new EventStoreCloud.IntegrationArgs
    ///         {
    ///             ProjectId = @var.Project_id,
    ///             Description = "send Slack a message when a notification happens",
    ///             Data = 
    ///             {
    ///                 { "sink", "slack" },
    ///                 { "token", "&lt;secret token here&gt;" },
    ///                 { "channel_id", "#esc-cluster-notifications" },
    ///                 { "source", "notifications" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import eventstorecloud:index/integration:Integration opsgenie_issues project_id:integration_id
    /// ```
    /// </summary>
    [EventStoreCloudResourceType("eventstorecloud:index/integration:Integration")]
    public partial class Integration : Pulumi.CustomResource
    {
        /// <summary>
        /// Data for the integration
        /// </summary>
        [Output("data")]
        public Output<ImmutableDictionary<string, object>> Data { get; private set; } = null!;

        /// <summary>
        /// Human readable description of the integration
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// ID of the project to which the integration applies
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a Integration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Integration(string name, IntegrationArgs args, CustomResourceOptions? options = null)
            : base("eventstorecloud:index/integration:Integration", name, args ?? new IntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Integration(string name, Input<string> id, IntegrationState? state = null, CustomResourceOptions? options = null)
            : base("eventstorecloud:index/integration:Integration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/EventStore/pulumi-eventstorecloud/releases/download/0.2.4+dirty",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Integration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Integration Get(string name, Input<string> id, IntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new Integration(name, id, state, options);
        }
    }

    public sealed class IntegrationArgs : Pulumi.ResourceArgs
    {
        [Input("data", required: true)]
        private InputMap<object>? _data;

        /// <summary>
        /// Data for the integration
        /// </summary>
        public InputMap<object> Data
        {
            get => _data ?? (_data = new InputMap<object>());
            set => _data = value;
        }

        /// <summary>
        /// Human readable description of the integration
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// ID of the project to which the integration applies
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public IntegrationArgs()
        {
        }
    }

    public sealed class IntegrationState : Pulumi.ResourceArgs
    {
        [Input("data")]
        private InputMap<object>? _data;

        /// <summary>
        /// Data for the integration
        /// </summary>
        public InputMap<object> Data
        {
            get => _data ?? (_data = new InputMap<object>());
            set => _data = value;
        }

        /// <summary>
        /// Human readable description of the integration
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ID of the project to which the integration applies
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public IntegrationState()
        {
        }
    }
}
